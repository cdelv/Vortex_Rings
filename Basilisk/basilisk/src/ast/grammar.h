/* Automatically generated by grammar.c */
if (n->sym == sym_translation_unit)
  return ((n->child[0] && n->child[0]->sym == sym_external_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_translation_unit &&
           n->child[1] && n->child[1]->sym == sym_external_declaration && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_translation_unit &&
           n->child[1] && n->child[1]->sym == sym_error &&
           n->child[2] && n->child[2]->sym == token_symbol(';') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_translation_unit &&
           n->child[1] && n->child[1]->sym == sym_error &&
           n->child[2] && n->child[2]->sym == token_symbol('}') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_translation_unit &&
           n->child[1] && n->child[1]->sym == sym_error &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]));
if (n->sym == sym_primary_expression)
  return ((n->child[0] && n->child[0]->sym == sym_IDENTIFIER && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_constant && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_string && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_expression_error &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_generic_selection && !n->child[1]));
if (n->sym == sym_expression_error)
  return ((n->child[0] && n->child[0]->sym == sym_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_error && !n->child[1]));
if (n->sym == sym_constant)
  return ((n->child[0] && n->child[0]->sym == sym_I_CONSTANT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_F_CONSTANT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_ENUMERATION_CONSTANT && !n->child[1]));
if (n->sym == sym_enumeration_constant)
  return ((n->child[0] && n->child[0]->sym == sym_IDENTIFIER && !n->child[1]));
if (n->sym == sym_string)
  return ((n->child[0] && n->child[0]->sym == sym_STRING_LITERAL && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_FUNC_NAME && !n->child[1]));
if (n->sym == sym_generic_selection)
  return ((n->child[0] && n->child[0]->sym == sym_GENERIC &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(',') &&
           n->child[4] && n->child[4]->sym == sym_generic_assoc_list &&
           n->child[5] && n->child[5]->sym == token_symbol(')') && !n->child[6]));
if (n->sym == sym_generic_assoc_list)
  return ((n->child[0] && n->child[0]->sym == sym_generic_association && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_generic_assoc_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_generic_association && !n->child[3]));
if (n->sym == sym_generic_association)
  return ((n->child[0] && n->child[0]->sym == sym_type_name &&
           n->child[1] && n->child[1]->sym == token_symbol(':') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_DEFAULT &&
           n->child[1] && n->child[1]->sym == token_symbol(':') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression && !n->child[3]));
if (n->sym == sym_postfix_expression)
  return ((n->child[0] && n->child[0]->sym == sym_primary_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_function_call && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_array_access && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('.') &&
           n->child[2] && n->child[2]->sym == sym_member_identifier && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == sym_PTR_OP &&
           n->child[2] && n->child[2]->sym == sym_member_identifier && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == sym_INC_OP && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == sym_DEC_OP && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_type_name &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_postfix_initializer && !n->child[4]));
if (n->sym == sym_postfix_initializer)
  return ((n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == sym_initializer_list &&
           n->child[2] && n->child[2]->sym == token_symbol('}') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == sym_initializer_list &&
           n->child[2] && n->child[2]->sym == token_symbol(',') &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]));
if (n->sym == sym_array_access)
  return ((n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]));
if (n->sym == sym_function_call)
  return ((n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_argument_expression_list &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]));
if (n->sym == sym_member_identifier)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier && !n->child[1]));
if (n->sym == sym_argument_expression_list)
  return ((n->child[0] && n->child[0]->sym == sym_argument_expression_list_item && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_argument_expression_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_argument_expression_list_item && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_argument_expression_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') && !n->child[2]));
if (n->sym == sym_argument_expression_list_item)
  return ((n->child[0] && n->child[0]->sym == sym_assignment_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_initializer && !n->child[1]));
if (n->sym == sym_unary_expression)
  return ((n->child[0] && n->child[0]->sym == sym_postfix_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_INC_OP &&
           n->child[1] && n->child[1]->sym == sym_unary_expression && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_DEC_OP &&
           n->child[1] && n->child[1]->sym == sym_unary_expression && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_unary_operator &&
           n->child[1] && n->child[1]->sym == sym_cast_expression && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_SIZEOF &&
           n->child[1] && n->child[1]->sym == sym_unary_expression && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_SIZEOF &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_type_name &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_ALIGNOF &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_type_name &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_NEW_FIELD && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_NEW_FIELD &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_postfix_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]));
if (n->sym == sym_unary_operator)
  return ((n->child[0] && n->child[0]->sym == token_symbol('&') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('*') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('+') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('-') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('~') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('!') && !n->child[1]));
if (n->sym == sym_cast_expression)
  return ((n->child[0] && n->child[0]->sym == sym_unary_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_type_name &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_cast_expression && !n->child[4]));
if (n->sym == sym_multiplicative_expression)
  return ((n->child[0] && n->child[0]->sym == sym_cast_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_multiplicative_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('*') &&
           n->child[2] && n->child[2]->sym == sym_cast_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_multiplicative_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('/') &&
           n->child[2] && n->child[2]->sym == sym_cast_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_multiplicative_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('%') &&
           n->child[2] && n->child[2]->sym == sym_cast_expression && !n->child[3]));
if (n->sym == sym_additive_expression)
  return ((n->child[0] && n->child[0]->sym == sym_multiplicative_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_additive_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('+') &&
           n->child[2] && n->child[2]->sym == sym_multiplicative_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_additive_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('-') &&
           n->child[2] && n->child[2]->sym == sym_multiplicative_expression && !n->child[3]));
if (n->sym == sym_shift_expression)
  return ((n->child[0] && n->child[0]->sym == sym_additive_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_shift_expression &&
           n->child[1] && n->child[1]->sym == sym_LEFT_OP &&
           n->child[2] && n->child[2]->sym == sym_additive_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_shift_expression &&
           n->child[1] && n->child[1]->sym == sym_RIGHT_OP &&
           n->child[2] && n->child[2]->sym == sym_additive_expression && !n->child[3]));
if (n->sym == sym_relational_expression)
  return ((n->child[0] && n->child[0]->sym == sym_shift_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_relational_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('<') &&
           n->child[2] && n->child[2]->sym == sym_shift_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_relational_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('>') &&
           n->child[2] && n->child[2]->sym == sym_shift_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_relational_expression &&
           n->child[1] && n->child[1]->sym == sym_LE_OP &&
           n->child[2] && n->child[2]->sym == sym_shift_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_relational_expression &&
           n->child[1] && n->child[1]->sym == sym_GE_OP &&
           n->child[2] && n->child[2]->sym == sym_shift_expression && !n->child[3]));
if (n->sym == sym_equality_expression)
  return ((n->child[0] && n->child[0]->sym == sym_relational_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_equality_expression &&
           n->child[1] && n->child[1]->sym == sym_EQ_OP &&
           n->child[2] && n->child[2]->sym == sym_relational_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_equality_expression &&
           n->child[1] && n->child[1]->sym == sym_NE_OP &&
           n->child[2] && n->child[2]->sym == sym_relational_expression && !n->child[3]));
if (n->sym == sym_and_expression)
  return ((n->child[0] && n->child[0]->sym == sym_equality_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_and_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('&') &&
           n->child[2] && n->child[2]->sym == sym_equality_expression && !n->child[3]));
if (n->sym == sym_exclusive_or_expression)
  return ((n->child[0] && n->child[0]->sym == sym_and_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_exclusive_or_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('^') &&
           n->child[2] && n->child[2]->sym == sym_and_expression && !n->child[3]));
if (n->sym == sym_inclusive_or_expression)
  return ((n->child[0] && n->child[0]->sym == sym_exclusive_or_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_inclusive_or_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('|') &&
           n->child[2] && n->child[2]->sym == sym_exclusive_or_expression && !n->child[3]));
if (n->sym == sym_logical_and_expression)
  return ((n->child[0] && n->child[0]->sym == sym_inclusive_or_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_logical_and_expression &&
           n->child[1] && n->child[1]->sym == sym_AND_OP &&
           n->child[2] && n->child[2]->sym == sym_inclusive_or_expression && !n->child[3]));
if (n->sym == sym_logical_or_expression)
  return ((n->child[0] && n->child[0]->sym == sym_logical_and_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_logical_or_expression &&
           n->child[1] && n->child[1]->sym == sym_OR_OP &&
           n->child[2] && n->child[2]->sym == sym_logical_and_expression && !n->child[3]));
if (n->sym == sym_conditional_expression)
  return ((n->child[0] && n->child[0]->sym == sym_logical_or_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_logical_or_expression &&
           n->child[1] && n->child[1]->sym == token_symbol('?') &&
           n->child[2] && n->child[2]->sym == sym_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(':') &&
           n->child[4] && n->child[4]->sym == sym_conditional_expression && !n->child[5]));
if (n->sym == sym_assignment_expression)
  return ((n->child[0] && n->child[0]->sym == sym_conditional_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_unary_expression &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_unary_expression &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_postfix_initializer && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_TYPEDEF_NAME &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_TYPEDEF_NAME &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_postfix_initializer && !n->child[3]));
if (n->sym == sym_assignment_operator)
  return ((n->child[0] && n->child[0]->sym == token_symbol('=') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_MUL_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_DIV_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_MOD_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_ADD_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_SUB_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_LEFT_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_RIGHT_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_AND_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_XOR_ASSIGN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_OR_ASSIGN && !n->child[1]));
if (n->sym == sym_expression)
  return ((n->child[0] && n->child[0]->sym == sym_assignment_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_expression &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression && !n->child[3]));
if (n->sym == sym_constant_expression)
  return ((n->child[0] && n->child[0]->sym == sym_conditional_expression && !n->child[1]));
if (n->sym == sym_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_declaration_specifiers &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_declaration_specifiers &&
           n->child[1] && n->child[1]->sym == sym_init_declarator_list &&
           n->child[2] && n->child[2]->sym == token_symbol(';') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_static_assert_declaration && !n->child[1]));
if (n->sym == sym_declaration_specifiers)
  return ((n->child[0] && n->child[0]->sym == sym_storage_class_specifier &&
           n->child[1] && n->child[1]->sym == sym_declaration_specifiers && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_storage_class_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_type_specifier &&
           n->child[1] && n->child[1]->sym == sym_declaration_specifiers && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_type_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_type_qualifier &&
           n->child[1] && n->child[1]->sym == sym_declaration_specifiers && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_type_qualifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_function_specifier &&
           n->child[1] && n->child[1]->sym == sym_declaration_specifiers && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_function_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_alignment_specifier &&
           n->child[1] && n->child[1]->sym == sym_declaration_specifiers && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_alignment_specifier && !n->child[1]));
if (n->sym == sym_init_declarator_list)
  return ((n->child[0] && n->child[0]->sym == sym_init_declarator && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_init_declarator_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_init_declarator && !n->child[3]));
if (n->sym == sym_init_declarator)
  return ((n->child[0] && n->child[0]->sym == sym_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('=') &&
           n->child[2] && n->child[2]->sym == sym_initializer && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_declarator && !n->child[1]));
if (n->sym == sym_storage_class_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_TYPEDEF && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_EXTERN && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_STATIC && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_THREAD_LOCAL && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_AUTO && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_REGISTER && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_TRACE && !n->child[1]));
if (n->sym == sym_type_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_types && !n->child[1]));
if (n->sym == sym_types)
  return ((n->child[0] && n->child[0]->sym == sym_VOID && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_CHAR && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_SHORT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_INT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_LONG && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_FLOAT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_DOUBLE && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_SIGNED && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_UNSIGNED && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_BOOL && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_COMPLEX && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_IMAGINARY && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_atomic_type_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_or_union_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_enum_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_TYPEDEF_NAME && !n->child[1]));
if (n->sym == sym_struct_or_union_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_struct_or_union &&
           n->child[1] && n->child[1]->sym == token_symbol('{') &&
           n->child[2] && n->child[2]->sym == sym_struct_declaration_list &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_or_union &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol('{') &&
           n->child[3] && n->child[3]->sym == sym_struct_declaration_list &&
           n->child[4] && n->child[4]->sym == token_symbol('}') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_or_union &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_or_union &&
           n->child[1] && n->child[1]->sym == token_symbol('{') &&
           n->child[2] && n->child[2]->sym == sym_error &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_or_union &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol('{') &&
           n->child[3] && n->child[3]->sym == sym_error &&
           n->child[4] && n->child[4]->sym == token_symbol('}') && !n->child[5]));
if (n->sym == sym_struct_or_union)
  return ((n->child[0] && n->child[0]->sym == sym_STRUCT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_UNION && !n->child[1]));
if (n->sym == sym_struct_declaration_list)
  return ((n->child[0] && n->child[0]->sym == sym_struct_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_declaration_list &&
           n->child[1] && n->child[1]->sym == sym_struct_declaration && !n->child[2]));
if (n->sym == sym_struct_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_specifier_qualifier_list &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_specifier_qualifier_list &&
           n->child[1] && n->child[1]->sym == sym_struct_declarator_list &&
           n->child[2] && n->child[2]->sym == token_symbol(';') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_static_assert_declaration && !n->child[1]));
if (n->sym == sym_specifier_qualifier_list)
  return ((n->child[0] && n->child[0]->sym == sym_type_specifier &&
           n->child[1] && n->child[1]->sym == sym_specifier_qualifier_list && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_type_specifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_type_qualifier &&
           n->child[1] && n->child[1]->sym == sym_specifier_qualifier_list && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_type_qualifier && !n->child[1]));
if (n->sym == sym_struct_declarator_list)
  return ((n->child[0] && n->child[0]->sym == sym_struct_declarator && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_struct_declarator_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_struct_declarator && !n->child[3]));
if (n->sym == sym_struct_declarator)
  return ((n->child[0] && n->child[0]->sym == token_symbol(':') &&
           n->child[1] && n->child[1]->sym == sym_constant_expression && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol(':') &&
           n->child[2] && n->child[2]->sym == sym_constant_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_declarator && !n->child[1]));
if (n->sym == sym_enum_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_ENUM &&
           n->child[1] && n->child[1]->sym == token_symbol('{') &&
           n->child[2] && n->child[2]->sym == sym_enumerator_list &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_ENUM &&
           n->child[1] && n->child[1]->sym == token_symbol('{') &&
           n->child[2] && n->child[2]->sym == sym_enumerator_list &&
           n->child[3] && n->child[3]->sym == token_symbol(',') &&
           n->child[4] && n->child[4]->sym == token_symbol('}') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_ENUM &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol('{') &&
           n->child[3] && n->child[3]->sym == sym_enumerator_list &&
           n->child[4] && n->child[4]->sym == token_symbol('}') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_ENUM &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol('{') &&
           n->child[3] && n->child[3]->sym == sym_enumerator_list &&
           n->child[4] && n->child[4]->sym == token_symbol(',') &&
           n->child[5] && n->child[5]->sym == token_symbol('}') && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_ENUM &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier && !n->child[2]));
if (n->sym == sym_enumerator_list)
  return ((n->child[0] && n->child[0]->sym == sym_enumerator && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_enumerator_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_enumerator && !n->child[3]));
if (n->sym == sym_enumerator)
  return ((n->child[0] && n->child[0]->sym == sym_enumeration_constant &&
           n->child[1] && n->child[1]->sym == token_symbol('=') &&
           n->child[2] && n->child[2]->sym == sym_constant_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_enumeration_constant && !n->child[1]));
if (n->sym == sym_atomic_type_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_ATOMIC &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_type_name &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]));
if (n->sym == sym_type_qualifier)
  return ((n->child[0] && n->child[0]->sym == sym_CONST && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_RESTRICT && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_VOLATILE && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_ATOMIC && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_MAYBECONST && !n->child[1]));
if (n->sym == sym_function_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_INLINE && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_NORETURN && !n->child[1]));
if (n->sym == sym_alignment_specifier)
  return ((n->child[0] && n->child[0]->sym == sym_ALIGNAS &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_type_name &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_ALIGNAS &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_constant_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]));
if (n->sym == sym_declarator)
  return ((n->child[0] && n->child[0]->sym == sym_pointer &&
           n->child[1] && n->child[1]->sym == sym_direct_declarator && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator && !n->child[1]));
if (n->sym == sym_direct_declarator)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_declarator &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol('*') &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_STATIC &&
           n->child[3] && n->child[3]->sym == sym_type_qualifier_list &&
           n->child[4] && n->child[4]->sym == sym_assignment_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(']') && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_STATIC &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == token_symbol('*') &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == sym_STATIC &&
           n->child[4] && n->child[4]->sym == sym_assignment_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(']') && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_parameter_type_list &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_error &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_identifier_list &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]));
if (n->sym == sym_generic_identifier)
  return ((n->child[0] && n->child[0]->sym == sym_IDENTIFIER && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_TYPEDEF_NAME && !n->child[1]));
if (n->sym == sym_pointer)
  return ((n->child[0] && n->child[0]->sym == token_symbol('*') &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier_list &&
           n->child[2] && n->child[2]->sym == sym_pointer && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('*') &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier_list && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('*') &&
           n->child[1] && n->child[1]->sym == sym_pointer && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('*') && !n->child[1]));
if (n->sym == sym_type_qualifier_list)
  return ((n->child[0] && n->child[0]->sym == sym_type_qualifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_type_qualifier_list &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier && !n->child[2]));
if (n->sym == sym_parameter_type_list)
  return ((n->child[0] && n->child[0]->sym == sym_parameter_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_ELLIPSIS && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_parameter_list && !n->child[1]));
if (n->sym == sym_parameter_list)
  return ((n->child[0] && n->child[0]->sym == sym_parameter_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_parameter_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_parameter_declaration && !n->child[3]));
if (n->sym == sym_parameter_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_declaration_specifiers &&
           n->child[1] && n->child[1]->sym == sym_declarator && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_declaration_specifiers &&
           n->child[1] && n->child[1]->sym == sym_abstract_declarator && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_declaration_specifiers && !n->child[1]));
if (n->sym == sym_identifier_list)
  return ((n->child[0] && n->child[0]->sym == sym_IDENTIFIER && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_identifier_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_IDENTIFIER && !n->child[3]));
if (n->sym == sym_type_name)
  return ((n->child[0] && n->child[0]->sym == sym_specifier_qualifier_list &&
           n->child[1] && n->child[1]->sym == sym_abstract_declarator && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_specifier_qualifier_list && !n->child[1]));
if (n->sym == sym_abstract_declarator)
  return ((n->child[0] && n->child[0]->sym == sym_pointer &&
           n->child[1] && n->child[1]->sym == sym_direct_abstract_declarator && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_pointer && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator && !n->child[1]));
if (n->sym == sym_direct_abstract_declarator)
  return ((n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_abstract_declarator &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == token_symbol(']') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == token_symbol('*') &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_STATIC &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_STATIC &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier_list &&
           n->child[2] && n->child[2]->sym == sym_STATIC &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier_list &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_type_qualifier_list &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_assignment_expression &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol('*') &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_STATIC &&
           n->child[3] && n->child[3]->sym == sym_type_qualifier_list &&
           n->child[4] && n->child[4]->sym == sym_assignment_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(']') && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_STATIC &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == sym_assignment_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == sym_STATIC &&
           n->child[4] && n->child[4]->sym == sym_assignment_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(']') && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_type_qualifier_list &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == sym_assignment_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(']') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == token_symbol(')') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('(') &&
           n->child[1] && n->child[1]->sym == sym_parameter_type_list &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_direct_abstract_declarator &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_parameter_type_list &&
           n->child[3] && n->child[3]->sym == token_symbol(')') && !n->child[4]));
if (n->sym == sym_initializer)
  return ((n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == sym_initializer_list &&
           n->child[2] && n->child[2]->sym == token_symbol('}') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == sym_initializer_list &&
           n->child[2] && n->child[2]->sym == token_symbol(',') &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_assignment_expression && !n->child[1]));
if (n->sym == sym_initializer_list)
  return ((n->child[0] && n->child[0]->sym == sym_designation &&
           n->child[1] && n->child[1]->sym == sym_initializer && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_initializer && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_initializer_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_designation &&
           n->child[3] && n->child[3]->sym == sym_initializer && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_initializer_list &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_initializer && !n->child[3]));
if (n->sym == sym_designation)
  return ((n->child[0] && n->child[0]->sym == sym_designator_list &&
           n->child[1] && n->child[1]->sym == token_symbol('=') && !n->child[2]));
if (n->sym == sym_designator_list)
  return ((n->child[0] && n->child[0]->sym == sym_designator && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_designator_list &&
           n->child[1] && n->child[1]->sym == sym_designator && !n->child[2]));
if (n->sym == sym_designator)
  return ((n->child[0] && n->child[0]->sym == token_symbol('[') &&
           n->child[1] && n->child[1]->sym == sym_constant_expression &&
           n->child[2] && n->child[2]->sym == token_symbol(']') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('.') &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier && !n->child[2]));
if (n->sym == sym_static_assert_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_STATIC_ASSERT &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_constant_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(',') &&
           n->child[4] && n->child[4]->sym == sym_STRING_LITERAL &&
           n->child[5] && n->child[5]->sym == token_symbol(')') &&
           n->child[6] && n->child[6]->sym == token_symbol(';') && !n->child[7]));
if (n->sym == sym_statement)
  return ((n->child[0] && n->child[0]->sym == sym_labeled_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_compound_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_expression_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_selection_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_iteration_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_jump_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_basilisk_statements && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_error &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]));
if (n->sym == sym_labeled_statement)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier &&
           n->child[1] && n->child[1]->sym == token_symbol(':') &&
           n->child[2] && n->child[2]->sym == sym_statement && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_CASE &&
           n->child[1] && n->child[1]->sym == sym_constant_expression &&
           n->child[2] && n->child[2]->sym == token_symbol(':') &&
           n->child[3] && n->child[3]->sym == sym_statement && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_DEFAULT &&
           n->child[1] && n->child[1]->sym == token_symbol(':') &&
           n->child[2] && n->child[2]->sym == sym_statement && !n->child[3]));
if (n->sym == sym_compound_statement)
  return ((n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == token_symbol('}') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('{') &&
           n->child[1] && n->child[1]->sym == sym_block_item_list &&
           n->child[2] && n->child[2]->sym == token_symbol('}') && !n->child[3]));
if (n->sym == sym_block_item_list)
  return ((n->child[0] && n->child[0]->sym == sym_block_item && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_block_item_list &&
           n->child[1] && n->child[1]->sym == sym_block_item && !n->child[2]));
if (n->sym == sym_block_item)
  return ((n->child[0] && n->child[0]->sym == sym_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_statement && !n->child[1]));
if (n->sym == sym_expression_statement)
  return ((n->child[0] && n->child[0]->sym == token_symbol(';') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_expression &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]));
if (n->sym == sym_selection_statement)
  return ((n->child[0] && n->child[0]->sym == sym_IF &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression_error &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement &&
           n->child[5] && n->child[5]->sym == sym_ELSE &&
           n->child[6] && n->child[6]->sym == sym_statement && !n->child[7]) ||
          (n->child[0] && n->child[0]->sym == sym_IF &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression_error &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_SWITCH &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression_error &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]));
if (n->sym == sym_for_scope)
  return ((n->child[0] && n->child[0]->sym == sym_FOR && !n->child[1]));
if (n->sym == sym_iteration_statement)
  return ((n->child[0] && n->child[0]->sym == sym_WHILE &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]) ||
          (n->child[0] && n->child[0]->sym == sym_DO &&
           n->child[1] && n->child[1]->sym == sym_statement &&
           n->child[2] && n->child[2]->sym == sym_WHILE &&
           n->child[3] && n->child[3]->sym == token_symbol('(') &&
           n->child[4] && n->child[4]->sym == sym_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(')') &&
           n->child[6] && n->child[6]->sym == token_symbol(';') && !n->child[7]) ||
          (n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression_statement &&
           n->child[3] && n->child[3]->sym == sym_expression_statement &&
           n->child[4] && n->child[4]->sym == token_symbol(')') &&
           n->child[5] && n->child[5]->sym == sym_statement && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression_statement &&
           n->child[3] && n->child[3]->sym == sym_expression_statement &&
           n->child[4] && n->child[4]->sym == sym_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(')') &&
           n->child[6] && n->child[6]->sym == sym_statement && !n->child[7]) ||
          (n->child[0] && n->child[0]->sym == sym_for_declaration_statement && !n->child[1]));
if (n->sym == sym_for_declaration_statement)
  return ((n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_declaration &&
           n->child[3] && n->child[3]->sym == sym_expression_statement &&
           n->child[4] && n->child[4]->sym == token_symbol(')') &&
           n->child[5] && n->child[5]->sym == sym_statement && !n->child[6]) ||
          (n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_declaration &&
           n->child[3] && n->child[3]->sym == sym_expression_statement &&
           n->child[4] && n->child[4]->sym == sym_expression &&
           n->child[5] && n->child[5]->sym == token_symbol(')') &&
           n->child[6] && n->child[6]->sym == sym_statement && !n->child[7]));
if (n->sym == sym_jump_statement)
  return ((n->child[0] && n->child[0]->sym == sym_GOTO &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol(';') && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_CONTINUE &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_BREAK &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_RETURN &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]) ||
          (n->child[0] && n->child[0]->sym == sym_RETURN &&
           n->child[1] && n->child[1]->sym == sym_expression &&
           n->child[2] && n->child[2]->sym == token_symbol(';') && !n->child[3]));
if (n->sym == sym_external_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_function_definition && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_macro_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_event_definition && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_boundary_definition && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_external_foreach_dimension && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_attribute && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_error &&
           n->child[1] && n->child[1]->sym == sym_compound_statement && !n->child[2]));
if (n->sym == sym_function_declaration)
  return ((n->child[0] && n->child[0]->sym == sym_declaration_specifiers &&
           n->child[1] && n->child[1]->sym == sym_declarator && !n->child[2]));
if (n->sym == sym_function_definition)
  return ((n->child[0] && n->child[0]->sym == sym_function_declaration &&
           n->child[1] && n->child[1]->sym == sym_declaration_list &&
           n->child[2] && n->child[2]->sym == sym_compound_statement && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_function_declaration &&
           n->child[1] && n->child[1]->sym == sym_compound_statement && !n->child[2]));
if (n->sym == sym_declaration_list)
  return ((n->child[0] && n->child[0]->sym == sym_declaration && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_declaration_list &&
           n->child[1] && n->child[1]->sym == sym_declaration && !n->child[2]));
if (n->sym == sym_basilisk_statements)
  return ((n->child[0] && n->child[0]->sym == sym_macro_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_foreach_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_foreach_inner_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_foreach_dimension_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_forin_declaration_statement && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_forin_statement && !n->child[1]));
if (n->sym == sym_macro_statement)
  return ((n->child[0] && n->child[0]->sym == sym_function_call &&
           n->child[1] && n->child[1]->sym == sym_compound_statement && !n->child[2]));
if (n->sym == sym_foreach_statement)
  return ((n->child[0] && n->child[0]->sym == sym_FOREACH &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_statement && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_FOREACH &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_foreach_parameters &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]));
if (n->sym == sym_foreach_parameters)
  return ((n->child[0] && n->child[0]->sym == sym_foreach_parameter && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_foreach_parameters &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_foreach_parameter && !n->child[3]));
if (n->sym == sym_foreach_parameter)
  return ((n->child[0] && n->child[0]->sym == sym_assignment_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_reduction_list && !n->child[1]));
if (n->sym == sym_reduction_list)
  return ((n->child[0] && n->child[0]->sym == sym_reduction && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_reduction_list &&
           n->child[1] && n->child[1]->sym == sym_reduction && !n->child[2]));
if (n->sym == sym_reduction)
  return ((n->child[0] && n->child[0]->sym == sym_REDUCTION &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_reduction_operator &&
           n->child[3] && n->child[3]->sym == token_symbol(':') &&
           n->child[4] && n->child[4]->sym == sym_reduction_array &&
           n->child[5] && n->child[5]->sym == token_symbol(')') && !n->child[6]));
if (n->sym == sym_reduction_operator)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == token_symbol('+') && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_OR_OP && !n->child[1]));
if (n->sym == sym_reduction_array)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_generic_identifier &&
           n->child[1] && n->child[1]->sym == token_symbol('[') &&
           n->child[2] && n->child[2]->sym == token_symbol(':') &&
           n->child[3] && n->child[3]->sym == sym_expression &&
           n->child[4] && n->child[4]->sym == token_symbol(']') && !n->child[5]));
if (n->sym == sym_foreach_inner_statement)
  return ((n->child[0] && n->child[0]->sym == sym_FOREACH_INNER &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_statement && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_FOREACH_INNER &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]));
if (n->sym == sym_foreach_dimension_statement)
  return ((n->child[0] && n->child[0]->sym == sym_FOREACH_DIMENSION &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_statement && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_FOREACH_DIMENSION &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_I_CONSTANT &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_statement && !n->child[5]));
if (n->sym == sym_forin_declaration_statement)
  return ((n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_declaration_specifiers &&
           n->child[3] && n->child[3]->sym == sym_declarator &&
           n->child[4] && n->child[4]->sym == sym_IDENTIFIER &&
           n->child[5] && n->child[5]->sym == sym_forin_arguments &&
           n->child[6] && n->child[6]->sym == token_symbol(')') &&
           n->child[7] && n->child[7]->sym == sym_statement && !n->child[8]));
if (n->sym == sym_forin_statement)
  return ((n->child[0] && n->child[0]->sym == sym_for_scope &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_expression &&
           n->child[3] && n->child[3]->sym == sym_IDENTIFIER &&
           n->child[4] && n->child[4]->sym == sym_forin_arguments &&
           n->child[5] && n->child[5]->sym == token_symbol(')') &&
           n->child[6] && n->child[6]->sym == sym_statement && !n->child[7]));
if (n->sym == sym_forin_arguments)
  return ((n->child[0] && n->child[0]->sym == sym_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_postfix_initializer && !n->child[1]));
if (n->sym == sym_event_definition)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier &&
           n->child[1] && n->child[1]->sym == sym_generic_identifier &&
           n->child[2] && n->child[2]->sym == token_symbol('(') &&
           n->child[3] && n->child[3]->sym == sym_event_parameters &&
           n->child[4] && n->child[4]->sym == token_symbol(')') &&
           n->child[5] && n->child[5]->sym == sym_statement && !n->child[6]));
if (n->sym == sym_event_parameters)
  return ((n->child[0] && n->child[0]->sym == sym_event_parameter && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_event_parameters &&
           n->child[1] && n->child[1]->sym == token_symbol(',') &&
           n->child[2] && n->child[2]->sym == sym_event_parameter && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_event_parameters &&
           n->child[1] && n->child[1]->sym == token_symbol(';') &&
           n->child[2] && n->child[2]->sym == sym_event_parameter && !n->child[3]));
if (n->sym == sym_event_parameter)
  return ((n->child[0] && n->child[0]->sym == sym_conditional_expression && !n->child[1]) ||
          (n->child[0] && n->child[0]->sym == sym_unary_expression &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_conditional_expression && !n->child[3]) ||
          (n->child[0] && n->child[0]->sym == sym_unary_expression &&
           n->child[1] && n->child[1]->sym == sym_assignment_operator &&
           n->child[2] && n->child[2]->sym == sym_postfix_initializer && !n->child[3]));
if (n->sym == sym_boundary_definition)
  return ((n->child[0] && n->child[0]->sym == sym_assignment_expression &&
           n->child[1] && n->child[1]->sym == token_symbol(';') && !n->child[2]));
if (n->sym == sym_external_foreach_dimension)
  return ((n->child[0] && n->child[0]->sym == sym_FOREACH_DIMENSION &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == token_symbol(')') &&
           n->child[3] && n->child[3]->sym == sym_function_definition && !n->child[4]) ||
          (n->child[0] && n->child[0]->sym == sym_FOREACH_DIMENSION &&
           n->child[1] && n->child[1]->sym == token_symbol('(') &&
           n->child[2] && n->child[2]->sym == sym_I_CONSTANT &&
           n->child[3] && n->child[3]->sym == token_symbol(')') &&
           n->child[4] && n->child[4]->sym == sym_function_definition && !n->child[5]));
if (n->sym == sym_attribute)
  return ((n->child[0] && n->child[0]->sym == sym_generic_identifier &&
           n->child[1] && n->child[1]->sym == token_symbol('{') &&
           n->child[2] && n->child[2]->sym == sym_struct_declaration_list &&
           n->child[3] && n->child[3]->sym == token_symbol('}') && !n->child[4]));
if (n->sym == sym_root)
  return ((n->child[0] && n->child[0]->sym == sym_translation_unit && !n->child[1]));
